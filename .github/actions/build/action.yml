name: Bootstrap
description: 'Bootstrap the project'

inputs:
  # Selects the runner on which the workflow will run
  # See: https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
  runner:
    required: false
    description: 'Selects the runner on which the workflow will run'
    default: ubuntu-latest

  # Should npm or yarn be used to install dependencies?
  # if not defined, use npm if `package-lock.json` is present, otherwise use yarn
  package_manager:
    required: false
    description: 'Should npm or yarn be used to install dependencies? If not defined, use npm if `package-lock.json` is present, otherwise use yarn'

  # should generally be left undefined - it will default to the `.node-version` file in the root of the project
  node_version:
    required: false
    description: 'should generally be left undefined - it will default to the `.node-version` file in the root of the project'

  framework:
    required: true
    description: 'The framework used in the project (angular, react, next, node)'

  ssr:
    required: false
    description: 'Is the project using server-side rendering?'

  newrelic:
    required: false
    description: 'Should New Relic be used? If not defined, use New Relic if `newrelic.js` is present, otherwise do not use New Relic'

  use_artifact:
    required: true
    description: 'Defines whether to cache or artifact the build'

  ci_steps:
    required: false
    description: 'Defines whether to artifact the build'

  npm_build_vars:
    required: false
    description: 'Environment variables to add to npm run build'
    default: NEXT_TELEMETRY_DISABLED=1

  secrets:
    required: false
    description: 'Secrets vault to be used'

  environment:
    required: false
    description: 'Environment to be used'

  env_vars:
    required: false
    description: 'Additional environment variables set in the workflow (in the JSON format)'

  dist_path:
    required: false
    description: 'Path to dist folder. If not defined, a path based on framework will be used.'

  artifact_path:
    required: false
    description: 'Folder that gets uploaded to artifact.'

  override_env_json:
    required: false
    description: 'Override env.json file'

  # vault:
  VAULT_ADDR:
    required: false
    description: 'Vault address'

  VAULT_AUTH_METHOD:
    required: false
    description: 'Vault authentication method'

  VAULT_AUTH_ROLE_ID:
    required: false
    description: 'Vault authentication role ID'

  VAULT_AUTH_SECRET_ID:
    required: false
    description: 'Vault authentication secret ID'


runs:
  using: 'composite'
  steps:
    - name: Set up additional environment variables
      env:
        ADDITIONAL_VARIABLES: ${{ inputs.env_vars }}
      if: ${{ env.ADDITIONAL_VARIABLES }}
      shell: bash
      run: >
        if echo '${{ env.ADDITIONAL_VARIABLES }}' | jq >/dev/null 2>&1; then
          echo '${{ env.ADDITIONAL_VARIABLES }}' | jq -r 'to_entries[] | "\(.key) \(.value)"' | \
            while read -r key value; do echo "$key=$value" >> $GITHUB_ENV && echo "Variable $key has been set"; done
        else
          echo "ADDITIONAL_VARIABLES secret you supplied is not a valid JSON object. Check the formatting of the secret."
          exit 1
        fi

    - name: Git checkout
      uses: actions/checkout@v3

    - name: 'Bootstrap up the Node.js environment'
      uses: infinum/js-pipeline/.github/actions/bootstrap@v3
      with:
        runner: ${{ inputs.runner }}
        package_manager: ${{ inputs.package_manager }}
        node_version: ${{ inputs.node_version }}
        framework: ${{ inputs.framework }}
        env_vars: ${{ inputs.env_vars }}

    - name: Debug
      if: ${{ inputs.secrets }}
      shell: bash
      run: |
        echo "Secrets import starting"

    - name: Import Secrets
      if: ${{ inputs.secrets }}
      uses: hashicorp/vault-action@v2.4.3
      with:
        url: ${{ inputs.VAULT_ADDR }}
        method: ${{ inputs.VAULT_AUTH_METHOD }}
        roleId: ${{ inputs.VAULT_AUTH_ROLE_ID }}
        secretId: ${{ inputs.VAULT_AUTH_SECRET_ID }}
        secrets: |
          js/${{ inputs.secrets }}/${{ inputs.environment }} secrets | app_secrets ;

    - name: Add secrets
      if: ${{env.app_secrets}}
      shell: bash
      run: |
        echo "${{ env.app_secrets }}" > .env
        echo "Secrets have been added to the .env file"

    - name: Override env.json
      if: ${{ inputs.override_env_json != '' }}
      run: mv ${{ inputs.override_env_json }}.${{ inputs.environment }} ${{ inputs.override_env_json }}
      shell: bash

    - name: Run build
      shell: bash
      id: 'build'
      run: '${{ inputs.npm_build_vars }} npm run build'

    - name: Prepare Next.js standalone
      if: ${{ inputs.framework == 'next' && inputs.ssr }}
      shell: bash
      run: |
        if [ -f bin/build_artifact.sh ]; then
          bash bin/build_artifact.sh ${{ inputs.newrelic }} ${{ inputs.environment }}
        else
          mv ./.next/standalone/server.js ./.next/standalone/index.js
          cp -r ./public .next/standalone
          cp -r ./.next/static ./.next/standalone/.next
          cp ./next.config.js ./.next/standalone/next.config.js
          cp ./.node-version  ./.next/standalone/.node-version
          if ${{ inputs.newrelic }}; then
            cp ./newrelic.js ./.next/standalone/newrelic.js
          fi
        fi

    - name: Check file existence
      id: check_node_version
      uses: andstor/file-existence-action@v2
      with:
        files: ".node-version"

    - name: Prepare other node builds
      if: steps.check_node_version.outputs.files_exists
      shell: bash
      run: |
        cp ./.node-version  ./${{ inputs.dist_path }}/.node-version
        if ${{ inputs.newrelic }}; then
          cp ./newrelic.js ./${{ inputs.dist_path }}/newrelic.js
        fi

    - id: commit
      uses: pr-mpt/actions-commit-hash@v2

    - name: Cache the build
      id: cache-build
      if: ${{ inputs.use_artifact == 'false' && contains(inputs.ci_steps, 'deploy') }}
      uses: actions/cache@v3
      with:
        path: ${{ inputs.dist_path }}
        key: ${{ runner.os }}-build-${{ steps.commit.outputs.short }}

    - name: Prepare artifact for Next.js
      shell: bash
      if: ${{ inputs.framework == 'next' && ( contains(inputs.ci_steps, 'analyze') || ( contains(inputs.ci_steps, 'deploy') && inputs.use_artifact == 'true' ) ) }}
      id: 'prepare-artifact'
      run: 'rm -rf .next/cache'

    - name: Upload artifacts for Next.js - Artifact Path
      if: ${{ inputs.framework == 'next' && contains(inputs.ci_steps, 'analyze') }}
      uses: actions/upload-artifact@v3
      with:
        name: 'build-${{ steps.commit.outputs.short }}-artifact'
        path: ${{ inputs.artifact_path }}
        retention-days: 30

    - name: Upload artifacts for Next.js - Dist Path
      if: ${{ inputs.framework == 'next' && ( contains(inputs.ci_steps, 'deploy') && inputs.use_artifact == 'true' ) }}
      uses: actions/upload-artifact@v3
      with:
        name: 'build-${{ steps.commit.outputs.short }}-artifact-deployable'
        path: ${{ inputs.dist_path }}
        retention-days: 30

    - name: Generic upload artifacts
      if: ${{ inputs.framework != 'next' && !inputs.ssr && inputs.use_artifact == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: 'build-${{ steps.commit.outputs.short }}-artifact'
        path: ${{ inputs.dist_path }}
        retention-days: 1
