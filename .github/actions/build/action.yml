name: Bootstrap
description: 'Bootstrap the project'

inputs:
  # Selects the runner on which the workflow will run
  # See: https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
  runner:
    required: false
    description: 'Selects the runner on which the workflow will run'
    default: ubuntu-latest

  # Should npm or yarn be used to install dependencies?
  # if not defined, use npm if `package-lock.json` is present, otherwise use yarn
  package_manager:
    required: false
    description: 'Should npm or yarn be used to install dependencies? If not defined, use npm if `package-lock.json` is present, otherwise use yarn'

  # should generally be left undefined - it will default to the `.node-version` file in the root of the project
  node_version:
    required: false
    description: 'should generally be left undefined - it will default to the `.node-version` file in the root of the project'

  framework:
    required: true
    description: 'The framework used in the project (angular, react, next, node)'

  ssr:
    required: false
    description: 'Is the project using server-side rendering?'

  newrelic:
    required: false
    description: 'Should New Relic be used? If not defined, use New Relic if `newrelic.js` is present, otherwise do not use New Relic'

  secrets:
    required: false
    description: 'Secrets vault to be used'

  environment:
    required: false
    description: 'Environment to be used'

  env_vars:
    required: false
    description: 'Additional environment variables set in the workflow (in the JSON format)'

  dist_path:
    required: false
    description: 'Path to dist folder. If not defined, a path based on framework will be used.'

  # vault:
  VAULT_ADDR:
    required: false
    description: 'Vault address'
  VAULT_AUTH_METHOD:
    required: false
    description: 'Vault authentication method'
  VAULT_AUTH_ROLE_ID:
    required: false
    description: 'Vault authentication role ID'
  VAULT_AUTH_SECRET_ID:
    required: false
    description: 'Vault authentication secret ID'

runs:
  using: 'composite'
  steps:
    - name: Set up additional environment variables
      env:
        ADDITIONAL_VARIABLES: ${{ inputs.env_vars }}
      if: ${{ env.ADDITIONAL_VARIABLES }}
      shell: bash
      run: >
        if echo '${{ env.ADDITIONAL_VARIABLES }}' | jq >/dev/null 2>&1; then
          echo '${{ env.ADDITIONAL_VARIABLES }}' | jq -r 'to_entries[] | "\(.key) \(.value)"' | \
            while read -r key value; do echo "$key=$value" >> $GITHUB_ENV && echo "Variable $key has been set"; done
        else
          echo "ADDITIONAL_VARIABLES secret you supplied is not a valid JSON object. Check the formatting of the secret."
          exit 1
        fi
    - name: Git checkout
      uses: actions/checkout@v3
    - name: Detect env
      uses: infinum/js-pipeline/.github/actions/detect-env@v1
      with:
        runner: ${{ inputs.runner }}
        framework: ${{ inputs.framework }}
        ssr: ${{ inputs.ssr }}
        package_manager: ${{ inputs.package_manager }}
        newrelic: ${{ inputs.newrelic }}
        dist_path: ${{ inputs.dist_path }}
    - name: 'Bootstrap up the Node.js environment'
      uses: infinum/js-pipeline/.github/actions/bootstrap@v1
      with:
        runner: ${{ inputs.runner }}
        package_manager: ${{ env.package_manager }}
        node_version: ${{ inputs.node_version }}
        framework: ${{ env.framework }}
        env_vars: ${{ inputs.env_vars }}
    - name: Debug
      if: ${{ inputs.secrets }}
      shell: bash
      run: |
        echo "Secrets import starting"
    - name: Import Secrets
      if: ${{ inputs.secrets }}
      uses: hashicorp/vault-action@v2.4.3
      with:
        url: ${{ inputs.VAULT_ADDR }}
        method: ${{ inputs.VAULT_AUTH_METHOD }}
        roleId: ${{ inputs.VAULT_AUTH_ROLE_ID }}
        secretId: ${{ inputs.VAULT_AUTH_SECRET_ID }}
        secrets: |
          js/${{ inputs.secrets }}/${{ inputs.environment }} secrets | app_secrets ;
    - name: Add secrets
      if: ${{env.app_secrets}}
      shell: bash
      run: |
        echo "::add-mask::${{ env.app_secrets }}" > .env
        echo "Secrets have been added to the .env file"
    - name: Run build
      shell: bash
      id: 'build'
      run: 'NEXT_TELEMETRY_DISABLED=1 npm run build'