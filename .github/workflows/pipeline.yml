name: Build workflow

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      # Selects the runner on which the workflow will run
      # See: https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
      runner:
        required: false
        type: string
        default: ubuntu-latest

      environment:
        required: true
        type: string

      # React, Next, Angular or Node
      # if not defined:
      # * use angular if angular.json is present
      # * use next if next.config.js is present
      # * otherwise use react
      framework:
        required: false
        type: string

      # Server-side rendering or client-side rendering
      # if not defined:
      # * use ssr if next.config.js is present
      # * otherwise use csr
      ssr:
        required: false
        type: boolean
        default: false

      # Should npm or yarn be used to install dependencies?
      # if not defined, use npm if `package-lock.json` is present, otherwise use yarn
      package_manager:
        required: false
        type: string

      # should generally be left undefined - it will default to the `.node-version` file in the root of the project
      node_version:
        required: false
        type: string

      # Slack channel name where the notifications will be sent
      slack_notification_channel:
        required: false
        type: string

      # What types of notifications should be sent?
      # Valid values:
      #   - 'success'
      #   - 'failure'
      #   - 'all'
      notify_on:
        required: false
        type: string
        default: 'all'

      # Steps that should be executed during build
      # Valid values:
      #   - 'audit'
      #   - 'lint'
      #   - 'test'
      #   - 'jest'
      #   - 'build'
      #   - 'analyze'
      #   - 'deploy'
      ci_steps:
        required: true
        type: string

      # Secrets vault to be used
      secrets:
        required: false
        type: string

      newrelic:
        required: false
        type: boolean

      # The workflow that is used for bundle analysis
      workflow:
        required: false
        type: string

      deploy_host:
        required: false
        type: string

      deploy_to:
        required: false
        type: string

      deploy_user:
        required: false
        type: string

      deploy_port:
        required: false
        type: number

    secrets:
      VAULT_ADDR:
        required: false
      VAULT_AUTH_METHOD:
        required: false
      VAULT_AUTH_ROLE_ID:
        required: false
      VAULT_AUTH_SECRET_ID:
        required: false
      SLACK_BOT_TOKEN:
        required: false
      SSH_PRIVATE_KEY:
        required: false

      # Additional environment variables set in the workflow
      # Format: JSON object with string values (key becomes env variable name, value becomes env variable value)
      # Example: '{ "FOO": "BAR", "BAZ": "${{ secrets.BAZ }}" }'
      ADDITIONAL_VARIABLES:
        required: false

jobs:
  setup:
    name: 'Environment setup'
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Detect env
        uses: infinum/js-pipeline/.github/actions/detect-env@master
        with:
          runner: ${{ inputs.runner }}
          framework: ${{ inputs.framework }}
          ssr: ${{ inputs.ssr }}
          package_manager: ${{ inputs.package_manager }}
          newrelic: ${{ inputs.newrelic }}
      - name: 'Bootstrap up the Node.js environment'
        uses: infinum/js-pipeline/.github/actions/bootstrap@master
        with:
          runner: ${{ inputs.runner }}
          package_manager: ${{ env.package_manager }}
          node_version: ${{ inputs.node_version }}
          framework: ${{ env.framework }}
          env_vars: ${{ inputs.env_vars }}
      - name: Install JS packages
        shell: bash
        run: |
          if [ "${{ env.package_manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi
  build:
    needs: [setup]
    name: 'Build'
    if: ${{ contains(inputs.ci_steps, 'build') || contains(inputs.ci_steps, 'analyze') }}
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Set up additional environment variables
        env:
          ADDITIONAL_VARIABLES: ${{ secrets.ADDITIONAL_VARIABLES }}
        if: ${{ env.ADDITIONAL_VARIABLES }}
        run: >
          if echo '${{ env.ADDITIONAL_VARIABLES }}' | jq >/dev/null 2>&1; then
            echo '${{ env.ADDITIONAL_VARIABLES }}' | jq -r 'to_entries[] | "\(.key) \(.value)"' | \
              while read -r key value; do echo "$key=$value" >> $GITHUB_ENV && echo "Variable $key has been set"; done
          else
            echo "ADDITIONAL_VARIABLES secret you supplied is not a valid JSON object. Check the formatting of the secret."
            exit 1
          fi
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Detect env
        uses: infinum/js-pipeline/.github/actions/detect-env@master
        with:
          runner: ${{ inputs.runner }}
          framework: ${{ inputs.framework }}
          ssr: ${{ inputs.ssr }}
          package_manager: ${{ inputs.package_manager }}
          newrelic: ${{ inputs.newrelic }}
      - name: 'Bootstrap up the Node.js environment'
        uses: infinum/js-pipeline/.github/actions/bootstrap@master
        with:
          runner: ${{ inputs.runner }}
          package_manager: ${{ env.package_manager }}
          node_version: ${{ inputs.node_version }}
          framework: ${{ env.framework }}
          env_vars: ${{ inputs.env_vars }}
      - name: Import Secrets
        if: ${{ inputs.secrets }}
        uses: hashicorp/vault-action@v2.4.3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: ${{ secrets.VAULT_AUTH_METHOD }}
          roleId: ${{ secrets.VAULT_AUTH_ROLE_ID }}
          secretId: ${{ secrets.VAULT_AUTH_SECRET_ID }}
          secrets: |
            js/${{ inputs.secrets }}/${{ inputs.environment }} secrets | app_secrets ;
      - name: Add secrets
        if: ${{env.app_secrets}}
        run: |
          echo "::add-mask::${{ env.app_secrets }}" > .env
      - name: Run build
        shell: bash
        id: 'build'
        run: 'npm run build'
      - name: Prepare artifact
        shell: bash
        id: 'prepare-artifact'
        run: 'rm -rf .next/cache'
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: 'build'
          path: .next/**
  lint:
    needs: [setup]
    name: 'Lint the code'
    if: ${{ contains(inputs.ci_steps, 'lint') }}
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Detect env
        uses: infinum/js-pipeline/.github/actions/detect-env@master
        with:
          runner: ${{ inputs.runner }}
          framework: ${{ inputs.framework }}
          ssr: ${{ inputs.ssr }}
          package_manager: ${{ inputs.package_manager }}
          newrelic: ${{ inputs.newrelic }}
      - name: 'Bootstrap up the Node.js environment'
        uses: infinum/js-pipeline/.github/actions/bootstrap@master
        with:
          runner: ${{ inputs.runner }}
          package_manager: ${{ env.package_manager }}
          node_version: ${{ inputs.node_version }}
          framework: ${{ env.framework }}
          env_vars: ${{ inputs.env_vars }}
      - name: Run lint
        shell: bash
        id: 'lint'
        run: 'npm run lint'
  test:
    needs: [setup]
    name: 'Run tests'
    if: ${{ contains(inputs.ci_steps, 'test') }}
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Detect env
        uses: infinum/js-pipeline/.github/actions/detect-env@master
        with:
          runner: ${{ inputs.runner }}
          framework: ${{ inputs.framework }}
          ssr: ${{ inputs.ssr }}
          package_manager: ${{ inputs.package_manager }}
          newrelic: ${{ inputs.newrelic }}
      - name: 'Bootstrap up the Node.js environment'
        uses: infinum/js-pipeline/.github/actions/bootstrap@master
        with:
          runner: ${{ inputs.runner }}
          package_manager: ${{ env.package_manager }}
          node_version: ${{ inputs.node_version }}
          framework: ${{ env.framework }}
          env_vars: ${{ inputs.env_vars }}
      - name: Run test
        shell: bash
        id: 'test'
        run: 'npm run test'
  jest:
    needs: [setup]
    name: 'Run tests with coverage'
    if: ${{ contains(inputs.ci_steps, 'jest') }}
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Detect env
        uses: infinum/js-pipeline/.github/actions/detect-env@master
        with:
          runner: ${{ inputs.runner }}
          framework: ${{ inputs.framework }}
          ssr: ${{ inputs.ssr }}
          package_manager: ${{ inputs.package_manager }}
          newrelic: ${{ inputs.newrelic }}
      - name: 'Bootstrap up the Node.js environment'
        uses: infinum/js-pipeline/.github/actions/bootstrap@master
        with:
          runner: ${{ inputs.runner }}
          package_manager: ${{ env.package_manager }}
          node_version: ${{ inputs.node_version }}
          framework: ${{ env.framework }}
          env_vars: ${{ inputs.env_vars }}
      - name: Test Coverage
        id: testCoverage
        uses: anuraag016/Jest-Coverage-Diff@master
        with:
          fullCoverageDiff: false
          runCommand: 'npx jest --collectCoverageFrom=''["src/**/*.{js,jsx,ts,tsx}"]'' --coverage --collectCoverage=true --coverageDirectory=''./'' --coverageReporters=''json-summary'' --forceExit --detectOpenHandles src/.*test.*'
          delta: 0.5
  analyze:
    needs: [build]
    name: 'Analyze the Next.js bundle size'
    if: ${{ contains(inputs.ci_steps, 'analyze') }}
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: 'Analyze the bundle'
        uses: infinum/js-pipeline/.github/actions/analyze@master
        with:
          workflow: ${{ inputs.workflow }}
  deploy:
    needs: [setup]
    name: 'Deploy the application'
    if: ${{ contains(inputs.ci_steps, 'deploy') }}
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Set up additional environment variables
        env:
          ADDITIONAL_VARIABLES: ${{ secrets.ADDITIONAL_VARIABLES }}
        if: ${{ env.ADDITIONAL_VARIABLES }}
        run: >
          if echo '${{ env.ADDITIONAL_VARIABLES }}' | jq >/dev/null 2>&1; then
            echo '${{ env.ADDITIONAL_VARIABLES }}' | jq -r 'to_entries[] | "\(.key) \(.value)"' | \
              while read -r key value; do echo "$key=$value" >> $GITHUB_ENV && echo "Variable $key has been set"; done
          else
            echo "ADDITIONAL_VARIABLES secret you supplied is not a valid JSON object. Check the formatting of the secret."
            exit 1
          fi
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Detect env
        uses: infinum/js-pipeline/.github/actions/detect-env@master
        with:
          runner: ${{ inputs.runner }}
          framework: ${{ inputs.framework }}
          ssr: ${{ inputs.ssr }}
          package_manager: ${{ inputs.package_manager }}
          newrelic: ${{ inputs.newrelic }}

      - name: Check unsupported
        if: ${{ env.ssr == 'false' && env.framework != 'node' }}
        run: |
          echo "Only SSR and Node apps are currently supported for deployment"
          exit 1

      - name: 'Bootstrap up the Node.js environment'
        uses: infinum/js-pipeline/.github/actions/bootstrap@master
        with:
          runner: ${{ inputs.runner }}
          package_manager: ${{ env.package_manager }}
          node_version: ${{ inputs.node_version }}
          framework: ${{ env.framework }}
          env_vars: ${{ inputs.env_vars }}

      - name: Run build
        shell: bash
        id: 'build'
        run: 'npm run build'

      - name: Prepare Next.js standalone
        if: ${{ env.framework == 'next' && env.ssr == 'true' }}
        run: |
          mv ./.next/standalone/server.js ./.next/standalone/index.js;
          cp -r ./public .next/standalone/public;
          mkdir ./.next/standalone/public/_next;
          cp -r ./.next/static ./.next/standalone/public/_next/static;
          cp ./next.config.js ./.next/standalone/next.config.js
          if ${{ env.newrelic == 'true' }}; then
            cp ./newrelic.js ./.next/standalone/newrelic.js
          fi

      - id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Create release folder
        uses: appleboy/ssh-action@master
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
            mkdir -p ~/www/${{ inputs.deploy_host }}/releases/${{ steps.commit.outputs.short }}

      - name: Copy deployment for Next.js
        if: ${{ env.framework == 'next' && env.ssr == 'true' }}
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr
          path: .next/standalone/
          remote_path: /home/${{ inputs.deploy_user }}/www/${{ inputs.deploy_host }}/releases/${{ steps.commit.outputs.short }}/
          remote_host: ${{ inputs.deploy_host }}
          remote_port: ${{ inputs.deploy_port }}
          remote_user: ${{ inputs.deploy_user }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy deployment for other
        if: ${{ env.framework != 'next' || env.ssr == 'false' }}
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr
          path: .
          remote_path: /home/${{ inputs.deploy_user }}/www/${{ inputs.deploy_host }}/releases/${{ steps.commit.outputs.short }}/
          remote_host: ${{ inputs.deploy_host }}
          remote_port: ${{ inputs.deploy_port }}
          remote_user: ${{ inputs.deploy_user }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to ${{ inputs.environment }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
            cd ~/www/${{ inputs.deploy_host }}/releases/${{ steps.commit.outputs.short }}

      - name: Import Secrets
        if: ${{ inputs.secrets }}
        uses: hashicorp/vault-action@v2.4.3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: ${{ secrets.VAULT_AUTH_METHOD }}
          roleId: ${{ secrets.VAULT_AUTH_ROLE_ID }}
          secretId: ${{ secrets.VAULT_AUTH_SECRET_ID }}
          secrets: |
            js/${{ inputs.secrets }}/${{ inputs.environment }} secrets | app_secrets ;

      - name: Deploy the release
        uses: appleboy/ssh-action@master
        id: deploy-release
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
            cd ${{ inputs.deploy_to || format('/home/{0}/www/{1}', inputs.deploy_user, inputs.deploy_host) }}
            ln -nfs releases/${{ steps.commit.outputs.short }}/ current
            cd current
            if ${{env.app_secrets}} 
            then
              echo "::add-mask::${{ env.app_secrets }}" > .env
            fi
            if ${{ env.newrelic && contains(inputs.ci_steps, 'deploy') }}
            then
              npm install @newrelic/next
              NODE_OPTIONS='-r @newrelic/next' passenger-config restart-app ~/www/${{ inputs.deploy_host }}/current
            else
              passenger-config restart-app ~/www/${{ inputs.deploy_host }}/current
            fi

      - name: Clean up failed release
        uses: appleboy/ssh-action@master
        if: ${{ failure() }}
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
            cd ${{ inputs.deploy_to || format('/home/{0}/www/{1}', inputs.deploy_user, inputs.deploy_host) }}/releases/ && rm -r ${{ steps.commit.outputs.short }}

      - name: Clean up release folder
        uses: appleboy/ssh-action@master
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
            cd ${{ inputs.deploy_to || format('/home/{0}/www/{1}', inputs.deploy_user, inputs.deploy_host) }}/releases/ && ls -tl | tail -n +5 | awk '{print $9}' | xargs rm -rf {}

      - name: Notify on Slack
        env:
          SUCCESS: ${{ steps.deploy-release.outcome == 'success' }}
          FAILURE: ${{ steps.deploy-release.outcome != 'success' }}
          CHANNEL: ${{ inputs.slack_notification_channel }}
          NOTIFY_ON: ${{ inputs.notify_on }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEPLOY_ENVIRONMENT: ${{ inputs.environment }}
        if: ${{ always() && inputs.slack_notification_channel }}
        run: |
          if [ -z "$SLACK_BOT_TOKEN" ] ; then
            echo "SLACK_BOT_TOKEN secret is missing from the workflow!"
            exit 1
          fi
          if [[ "$NOTIFY_ON" != "success" && "$NOTIFY_ON" != "failure" && "$NOTIFY_ON" != "all" ]] ; then
            echo "notify_on input is not valid. Must be one of: 'success', 'failure', or 'all'"
            exit 1
          fi
          SHORT_SHA=$(git rev-parse --short HEAD)
          FULL_SHA=$(git rev-parse HEAD)
          COMMIT_MESSAGE=$(git show -s --format=%s)
          GITHUB_RUN_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          GITHUB_COMMIT_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$FULL_SHA"
          if [[ "$SUCCESS" = true && ("$NOTIFY_ON" = "success" || "$NOTIFY_ON" = "all") ]] ; then
            curl -X POST https://slack.com/api/chat.postMessage \
                 -H "Content-type: application/json; charset=utf-8" \
                 -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                 -s -S \
                 -d @- <<- EOF
                  {
                    "channel": "$CHANNEL",
                    "attachments": [
                      {
                        "color": "#19a974",
                        "blocks": [
                          {
                            "type": "section",
                            "text": {
                              "type": "mrkdwn",
                              "text": "$GITHUB_ACTOR <$GITHUB_RUN_URL|deployed> to *$DEPLOY_ENVIRONMENT*! :tada: \n _ $COMMIT_MESSAGE _ (<$GITHUB_COMMIT_URL|$SHORT_SHA>)"
                            }
                          }
                        ]
                      }
                    ]
                  }
          EOF
          fi
          if [[ "$FAILURE" = true && ("$NOTIFY_ON" = "failure" || "$NOTIFY_ON" = "all") ]] ; then
            curl -X POST https://slack.com/api/chat.postMessage \
                 -H "Content-type: application/json; charset=utf-8" \
                 -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                 -s -S \
                 -d @- <<- EOF
                  {
                    "channel": "$CHANNEL",
                    "attachments": [
                      {
                        "color": "#f75819",
                        "blocks": [
                          {
                            "type": "section",
                            "text": {
                              "type": "mrkdwn",
                              "text": "$GITHUB_ACTOR failed to <$GITHUB_RUN_URL|deploy> to *$DEPLOY_ENVIRONMENT*! :boom: \n _ $COMMIT_MESSAGE _ (<$GITHUB_COMMIT_URL|$SHORT_SHA>)"
                            }
                          }
                        ]
                      }
                    ]
                  }
          EOF
          fi
