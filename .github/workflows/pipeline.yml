name: Build workflow

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      # Selects the runner on which the workflow will run
      # See: https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
      runner:
        required: false
        type: string
        default: ubuntu-latest

      # Used for accessing environment specific secrets vault and Slack integration messages
      environment:
        required: true
        type: string

      # React, Next, Angular or Node
      # if not defined:
      # * use angular if angular.json is present
      # * use next if next.config.js is present
      # * otherwise use react
      framework:
        required: false
        type: string

      # Server-side rendering or client-side rendering
      # if not defined:
      # * use ssr if next.config.js is present
      # * otherwise use csr
      ssr:
        required: false
        type: boolean

      # Should npm or yarn be used to install dependencies?
      # if not defined, use npm if `package-lock.json` is present, otherwise use yarn
      package_manager:
        required: false
        type: string

      # Define is build should upload an artifact
      # If left false, cache will be used for deploy
      use_artifact:
        required: false
        type: boolean
        default: false

      # should generally be left undefined - it will default to the `.node-version` file in the root of the project
      node_version:
        required: false
        type: string

      # Slack channel name where the notifications will be sent
      slack_notification_channel:
        required: false
        type: string

      # What types of notifications should be sent?
      # Valid values:
      #   - 'success'
      #   - 'failure'
      #   - 'all'
      notify_on:
        required: false
        type: string
        default: 'all'

      # Steps that should be executed during build
      # Valid values:
      #   - 'audit'
      #   - 'lint'
      #   - 'test'
      #   - 'jest'
      #   - 'build'
      #   - 'analyze'
      #   - 'deploy'
      ci_steps:
        required: true
        type: string

      # Secrets vault to be used
      secrets:
        required: false
        type: string

      newrelic:
        required: false
        type: boolean

      # The workflow that is used for bundle analysis
      workflow:
        required: false
        type: string

      deploy_host:
        required: false
        type: string

      deploy_to:
        required: false
        type: string

      deploy_user:
        required: false
        type: string

      deploy_port:
        required: false
        type: number

      project_icon:
        required: false
        type: string
        default: 'https://i.imgur.com/v6bLyxF.png'

      dist_path:
        required: false
        type: string

      timeout_minutes:
        required: false
        type: number
        default: 10

    secrets:
      VAULT_ADDR:
        required: false

      VAULT_AUTH_METHOD:
        required: false

      VAULT_AUTH_ROLE_ID:
        required: false

      VAULT_AUTH_SECRET_ID:
        required: false

      SLACK_BOT_TOKEN:
        required: false

      SSH_PRIVATE_KEY:
        required: false

      # Additional environment variables set in the workflow
      # Format: JSON object with string values (key becomes env variable name, value becomes env variable value)
      # Example: '{ "FOO": "BAR", "BAZ": "${{ secrets.BAZ }}" }'
      ADDITIONAL_VARIABLES:
        required: false

jobs:
  setup:
    name: 'Environment setup'
    runs-on: ${{ inputs.runner }}
    outputs:
      output_framework: ${{ steps.export_variables.outputs.framework }}
      output_ssr: ${{ steps.export_variables.outputs.ssr }}
      output_package_manager: ${{ steps.export_variables.outputs.package_manager }}
      output_newrelic: ${{ steps.export_variables.outputs.newrelic }}
      output_dist_path: ${{ steps.export_variables.outputs.dist_path }}
      output_artifact_path: ${{ steps.export_variables.outputs.artifact_path }}
    timeout-minutes: ${{ inputs.timeout_minutes }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Detect env
        uses: infinum/js-pipeline/.github/actions/detect-env@v3
        with:
          runner: ${{ inputs.runner }}
          framework: ${{ inputs.framework }}
          ssr: ${{ inputs.ssr }}
          package_manager: ${{ inputs.package_manager }}
          newrelic: ${{ inputs.newrelic }}
          dist_path: ${{ inputs.dist_path }}

      - name: 'Bootstrap up the Node.js environment'
        uses: infinum/js-pipeline/.github/actions/bootstrap@v3
        with:
          runner: ${{ inputs.runner }}
          package_manager: ${{ env.package_manager }}
          node_version: ${{ inputs.node_version }}
          framework: ${{ env.framework }}
          env_vars: ${{ secrets.ADDITIONAL_VARIABLES }}

      - id: export_variables
        run: |
          echo "framework=${{ env.framework }}" >> "$GITHUB_OUTPUT"
          echo "ssr=${{ env.ssr }}" >> "$GITHUB_OUTPUT"
          echo "package_manager=${{ env.package_manager }}" >> "$GITHUB_OUTPUT"
          echo "newrelic=${{ env.newrelic }}" >> "$GITHUB_OUTPUT"
          echo "dist_path=${{ env.dist_path }}" >> "$GITHUB_OUTPUT"
          echo "artifact_path=${{ env.artifact_path }}" >> "$GITHUB_OUTPUT"

  build:
    needs: [setup]
    name: 'Build'
    if: ${{ contains(inputs.ci_steps, 'build') || contains(inputs.ci_steps, 'analyze') || contains(inputs.ci_steps, 'deploy') }}
    runs-on: ${{ inputs.runner }}
    env:
      OUTPUT_FRAMEWORK: ${{ needs.setup.outputs.output_framework }}
      OUTPUT_SSR: ${{ needs.setup.outputs.output_ssr }}
      OUTPUT_PACKAGE_MANAGER: ${{ needs.setup.outputs.output_package_manager }}
      OUTPUT_NEWRELIC: ${{ needs.setup.outputs.output_newrelic }}
      OUTPUT_DIST_PATH: ${{ needs.setup.outputs.output_dist_path }}
      OUTPUT_ARTIFACT_PATH: ${{ needs.setup.outputs.output_artifact_path }}
    timeout-minutes: ${{ inputs.timeout_minutes }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Build
        uses: infinum/js-pipeline/.github/actions/build@v3
        with:
          runner: ${{ inputs.runner }}
          framework: ${{ env.OUTPUT_FRAMEWORK }}
          ssr: ${{ env.OUTPUT_SSR }}
          package_manager: ${{ env.OUTPUT_PACKAGE_MANAGER }}
          node_version: ${{ inputs.node_version }}
          newrelic: ${{ env.OUTPUT_NEWRELIC }}
          environment: ${{ inputs.environment }}
          secrets: ${{ inputs.secrets }}
          env_vars: ${{ secrets.ADDITIONAL_VARIABLES }}
          dist_path: ${{ env.OUTPUT_DIST_PATH }}
          artifact_path: ${{ env.OUTPUT_ARTIFACT_PATH }}
          use_artifact: ${{ inputs.use_artifact }}
          ci_steps: ${{ inputs.ci_steps }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_AUTH_METHOD: ${{ secrets.VAULT_AUTH_METHOD }}
          VAULT_AUTH_SECRET_ID: ${{ secrets.VAULT_AUTH_SECRET_ID }}
          VAULT_AUTH_ROLE_ID: ${{ secrets.VAULT_AUTH_ROLE_ID }}

  lint:
    needs: [setup]
    name: 'Lint the code'
    if: ${{ contains(inputs.ci_steps, 'lint') }}
    runs-on: ${{ inputs.runner }}
    env:
      OUTPUT_FRAMEWORK: ${{ needs.setup.outputs.output_framework }}
      OUTPUT_PACKAGE_MANAGER: ${{ needs.setup.outputs.output_package_manager }}
    timeout-minutes: ${{ inputs.timeout_minutes }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: 'Bootstrap up the Node.js environment'
        uses: infinum/js-pipeline/.github/actions/bootstrap@v3
        with:
          runner: ${{ inputs.runner }}
          package_manager: ${{ env.OUTPUT_PACKAGE_MANAGER }}
          node_version: ${{ inputs.node_version }}
          framework: ${{ env.OUTPUT_FRAMEWORK }}
          env_vars: ${{ secrets.ADDITIONAL_VARIABLES }}

      - name: Run lint
        shell: bash
        id: 'lint'
        run: 'npm run lint'
  test:
    needs: [setup]
    name: 'Run tests'
    if: ${{ contains(inputs.ci_steps, 'test') }}
    runs-on: ${{ inputs.runner }}
    env:
      OUTPUT_FRAMEWORK: ${{ needs.setup.outputs.output_framework }}
      OUTPUT_PACKAGE_MANAGER: ${{ needs.setup.outputs.output_package_manager }}
    timeout-minutes: ${{ inputs.timeout_minutes }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: 'Bootstrap up the Node.js environment'
        uses: infinum/js-pipeline/.github/actions/bootstrap@v3
        with:
          runner: ${{ inputs.runner }}
          package_manager: ${{ env.OUTPUT_PACKAGE_MANAGER }}
          node_version: ${{ inputs.node_version }}
          framework: ${{ env.OUTPUT_FRAMEWORK }}
          env_vars: ${{ secrets.ADDITIONAL_VARIABLES }}

      - name: Run test
        shell: bash
        id: 'test'
        run: 'npm run test'

  jest:
    needs: [setup]
    name: 'Run tests with coverage'
    if: ${{ contains(inputs.ci_steps, 'jest') }}
    runs-on: ${{ inputs.runner }}
    env:
      OUTPUT_FRAMEWORK: ${{ needs.setup.outputs.output_framework }}
      OUTPUT_PACKAGE_MANAGER: ${{ needs.setup.outputs.output_package_manager }}
    timeout-minutes: ${{ inputs.timeout_minutes }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: 'Bootstrap up the Node.js environment'
        uses: infinum/js-pipeline/.github/actions/bootstrap@v3
        with:
          runner: ${{ inputs.runner }}
          package_manager: ${{ env.OUTPUT_PACKAGE_MANAGER }}
          node_version: ${{ inputs.node_version }}
          framework: ${{ env.OUTPUT_FRAMEWORK }}
          env_vars: ${{ secrets.ADDITIONAL_VARIABLES }}

      - name: Test Coverage
        id: testCoverage
        uses: anuraag016/Jest-Coverage-Diff@master
        with:
          fullCoverageDiff: false
          runCommand: 'npx jest --collectCoverageFrom=''["src/**/*.{js,jsx,ts,tsx}"]'' --coverage --collectCoverage=true --coverageDirectory=''./'' --coverageReporters=''json-summary'' --forceExit --detectOpenHandles src/.*test.*'
          delta: 0.5

  analyze:
    needs: [build]
    name: 'Analyze the Next.js bundle size'
    if: ${{ contains(inputs.ci_steps, 'analyze') }}
    runs-on: ${{ inputs.runner }}
    timeout-minutes: ${{ inputs.timeout_minutes }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: 'Analyze the bundle'
        uses: infinum/js-pipeline/.github/actions/analyze@v3
        with:
          workflow: ${{ inputs.workflow }}

  deploy:
    needs: [setup, build]
    name: 'Deploy the application'
    if: ${{ contains(inputs.ci_steps, 'deploy') }}
    runs-on: ${{ inputs.runner }}
    env:
      OUTPUT_FRAMEWORK: ${{ needs.setup.outputs.output_framework }}
      OUTPUT_SSR: ${{ needs.setup.outputs.output_ssr }}
      OUTPUT_PACKAGE_MANAGER: ${{ needs.setup.outputs.output_package_manager }}
      OUTPUT_NEWRELIC: ${{ needs.setup.outputs.output_newrelic }}
      OUTPUT_DIST_PATH: ${{ needs.setup.outputs.output_dist_path }}
      OUTPUT_ARTIFACT_PATH: ${{ needs.setup.outputs.output_artifact_path }}
    timeout-minutes: ${{ inputs.timeout_minutes }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - id: commit
        uses: pr-mpt/actions-commit-hash@v2

      # Check the deploy technology (containers and s3 should be covered differently) - conditionals cover only cache/artifact
      - name: Restore the build from cache
        uses: actions/cache/restore@v3
        if: ${{ !inputs.use_artifact }}
        id: restore-build-cache
        with:
          path: ${{ env.OUTPUT_DIST_PATH }}
          key: ${{ runner.os }}-build-${{ steps.commit.outputs.short }}

      - name: Restore the build from artifact
        uses: actions/download-artifact@v3
        if: ${{ inputs.use_artifact }}
        id: restore-build-artifact
        with:
          name: 'build-${{ steps.commit.outputs.short }}-artifact-deployable'
          path: ${{ env.OUTPUT_DIST_PATH }}

      - name: Create release folder
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
            mkdir -p ~/www/${{ inputs.deploy_host }}/releases/${{ steps.commit.outputs.short }}

      - name: Copy deployment for Next.js
        if: ${{ env.OUTPUT_FRAMEWORK == 'next' && env.OUTPUT_SSR }}
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr
          path: ${{ env.OUTPUT_DIST_PATH }}
          remote_path: /home/${{ inputs.deploy_user }}/www/${{ inputs.deploy_host }}/releases/${{ steps.commit.outputs.short }}/
          remote_host: ${{ inputs.deploy_host }}
          remote_port: ${{ inputs.deploy_port }}
          remote_user: ${{ inputs.deploy_user }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy deployment for other
        if: ${{ env.OUTPUT_FRAMEWORK != 'next' || env.OUTPUT_SSR }}
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr
          path: ${{ env.OUTPUT_DIST_PATH }}
          remote_path: /home/${{ inputs.deploy_user }}/www/${{ inputs.deploy_host }}/releases/${{ steps.commit.outputs.short }}/
          remote_host: ${{ inputs.deploy_host }}
          remote_port: ${{ inputs.deploy_port }}
          remote_user: ${{ inputs.deploy_user }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to ${{ inputs.environment }}
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
            cd ~/www/${{ inputs.deploy_host }}/releases/${{ steps.commit.outputs.short }}

      - name: Deploy the release
        uses: appleboy/ssh-action@v0.1.6
        id: deploy-release
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
            cd ${{ inputs.deploy_to || format('/home/{0}/www/{1}', inputs.deploy_user, inputs.deploy_host) }}
            ln -nfs releases/${{ steps.commit.outputs.short }}/ current
            cd current
            if ${{ env.OUTPUT_NEWRELIC }}
            then
              npm install @newrelic/next
              NODE_OPTIONS='-r @newrelic/next' passenger-config restart-app --ignore-app-not-running ~/www/${{ inputs.deploy_host }}/current
            else
              passenger-config restart-app --ignore-app-not-running ~/www/${{ inputs.deploy_host }}/current
            fi

      - name: Clean up failed release
        uses: appleboy/ssh-action@v0.1.6
        if: ${{ failure() }}
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
           cd ${{ inputs.deploy_to || format('/home/{0}/www/{1}', inputs.deploy_user, inputs.deploy_host) }}/releases/ && rm -r ${{ steps.commit.outputs.short }}
           cd ${{ inputs.deploy_to || format('/home/{0}/www/{1}', inputs.deploy_user, inputs.deploy_host) }}/ && ln -nfs releases/$(ls -t releases | head -n 1)/ current
           passenger-config restart-app --ignore-app-not-running ~/www/${{ inputs.deploy_host }}/current

      - name: Clean up release folder
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
            cd ${{ inputs.deploy_to || format('/home/{0}/www/{1}', inputs.deploy_user, inputs.deploy_host) }}/releases/ && ls -tl | tail -n +5 | awk '{print $9}' | xargs rm -rf {}

      - name: Notify on Slack
        env:
          SUCCESS: ${{ steps.deploy-release.outcome == 'success' }}
          FAILURE: ${{ steps.deploy-release.outcome != 'success' }}
          CHANNEL: ${{ inputs.slack_notification_channel }}
          NOTIFY_ON: ${{ inputs.notify_on }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEPLOY_ENVIRONMENT: ${{ inputs.environment }}
        if: ${{ always() && inputs.slack_notification_channel }}
        run: |
          if [ -z "$SLACK_BOT_TOKEN" ] ; then
            echo "SLACK_BOT_TOKEN secret is missing from the workflow!"
            exit 1
          fi
          if [[ "$NOTIFY_ON" != "success" && "$NOTIFY_ON" != "failure" && "$NOTIFY_ON" != "all" ]] ; then
            echo "notify_on input is not valid. Must be one of: 'success', 'failure', or 'all'"
            exit 1
          fi
          SHORT_SHA=$(git rev-parse --short HEAD)
          FULL_SHA=$(git rev-parse HEAD)
          COMMIT_MESSAGE=$(git show -s --format=%s)
          GITHUB_RUN_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          GITHUB_COMMIT_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$FULL_SHA"
          if [[ "$SUCCESS" = true && ("$NOTIFY_ON" = "success" || "$NOTIFY_ON" = "all") ]] ; then
            curl -X POST https://slack.com/api/chat.postMessage \
                 -H "Content-type: application/json; charset=utf-8" \
                 -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                 -s -S \
                 -d @- <<- EOF
                  {
                    "channel": "$CHANNEL",
                    "icon_url": "${{ inputs.project_icon }}",
                    "username": "GitHub Deploy Action",
                    "attachments": [
                      {
                        "color": "#19a974",
                        "blocks": [
                          {
                            "type": "section",
                            "text": {
                              "type": "mrkdwn",
                              "text": "$GITHUB_ACTOR <$GITHUB_RUN_URL|deployed> to *$DEPLOY_ENVIRONMENT*! :tada: \n _ $COMMIT_MESSAGE _ (<$GITHUB_COMMIT_URL|$SHORT_SHA>)"
                            }
                          }
                        ]
                      }
                    ]
                  }
          EOF
          fi
          if [[ "$FAILURE" = true && ("$NOTIFY_ON" = "failure" || "$NOTIFY_ON" = "all") ]] ; then
            curl -X POST https://slack.com/api/chat.postMessage \
                 -H "Content-type: application/json; charset=utf-8" \
                 -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                 -s -S \
                 -d @- <<- EOF
                  {
                    "channel": "$CHANNEL",
                    "icon_url": ${{ inputs.project_icon }},
                    "username": "GitHub Deploy Action",
                    "attachments": [
                      {
                        "color": "#f75819",
                        "blocks": [
                          {
                            "type": "section",
                            "text": {
                              "type": "mrkdwn",
                              "text": "$GITHUB_ACTOR failed to <$GITHUB_RUN_URL|deploy> to *$DEPLOY_ENVIRONMENT*! :boom: \n _ $COMMIT_MESSAGE _ (<$GITHUB_COMMIT_URL|$SHORT_SHA>)"
                            }
                          }
                        ]
                      }
                    ]
                  }
          EOF
          fi
