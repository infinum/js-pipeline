name: EC2 Deploy workflow

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      # See: https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
      runner:
        required: false
        type: string
        default: ubuntu-latest
        description: 'Selects the runner on which the workflow will run'

      environment:
        required: true
        type: string
        description: 'Used for accessing environment specific secrets and variables'
      
      deploy_host:
        required: true
        type: string
        description: 'Domain name of the app, used for the ssh connection and the directory structure'

      deploy_port:
        required: true
        type: number
        description: 'Port for the SSH connection'

      deploy_user:
        required: true
        type: string
        description: 'Host user for the application'

      deploy_to:
          required: false
          type: string

    secrets:
      SSH_PRIVATE_KEY:
        required: true
        description: 'SSH private key of the host'
jobs:
  deploy:
    name: 'Deploy the application to EC2'
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: public
          path: public

      - name: Create release folder
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
            mkdir -p ~/www/${{ inputs.deploy_host }}/releases/${{ steps.commit.outputs.short }}

      - name: Copy deployment to host
        if: ${{ env.framework == 'next' && env.ssr == 'true' }}
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr
          path: public/
          remote_path: /home/${{ inputs.deploy_user }}/www/${{ inputs.deploy_host }}/releases/${{ steps.commit.outputs.short }}/
          remote_host: ${{ inputs.deploy_host }}
          remote_port: ${{ inputs.deploy_port }}
          remote_user: ${{ inputs.deploy_user }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy the release
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
            cd ${{ inputs.deploy_to || format('/home/{0}/www/{1}', inputs.deploy_user, inputs.deploy_host) }}
            ln -nfs releases/${{ steps.commit.outputs.short }}/ current
            cd current
            if ${{ env.newrelic }}
            then
              npm install @newrelic/next
              NODE_OPTIONS='-r @newrelic/next' passenger-config restart-app --ignore-app-not-running ~/www/${{ inputs.deploy_host }}/current
            else
              passenger-config restart-app --ignore-app-not-running ~/www/${{ inputs.deploy_host }}/current
            fi

      - name: Clean up failed release
        uses: appleboy/ssh-action@v0.1.6
        if: ${{ failure() }}
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
            cd ${{ inputs.deploy_to || format('/home/{0}/www/{1}', inputs.deploy_user, inputs.deploy_host) }}/releases/ && rm -r ${{ steps.commit.outputs.short }}
            cd ${{ inputs.deploy_to || format('/home/{0}/www/{1}', inputs.deploy_user, inputs.deploy_host) }}/ && ln -nfs releases/$(ls -t releases | head -n 1)/ current
            passenger-config restart-app --ignore-app-not-running ~/www/${{ inputs.deploy_host }}/current

      - name: Clean up release folder
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ inputs.deploy_host }}
          username: ${{ inputs.deploy_user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.deploy_port }}
          script: |
            cd ${{ inputs.deploy_to || format('/home/{0}/www/{1}', inputs.deploy_user, inputs.deploy_host) }}/releases/ && ls -tl | tail -n +5 | awk '{print $9}' | xargs rm -rf {}
