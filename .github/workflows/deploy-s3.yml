name: S3 Deploy workflow

# Probably needed for S3 deploy
# Username
# Secret access key ID
# Secret access key

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      # Selects the runner on which the workflow will run
      # See: https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
      runner:
        required: false
        type: string
        default: ubuntu-latest

      # Used for accessing environment specific secrets vault and Slack integration messages
      environment:
        required: true
        type: string

      # Slack channel name where the notifications will be sent
      slack_notification_channel:
        required: false
        type: string

      # What types of notifications should be sent?
      # Valid values:
      #   - 'success'
      #   - 'failure'
      #   - 'all'
      notify_on:
        required: false
        type: string
        default: 'all'

      # Steps that should be executed during build
      # Valid values:
      #   - 'audit'
      #   - 'lint'
      #   - 'test'
      #   - 'jest'
      #   - 'build'
      #   - 'analyze'
      #   - 'deploy'
      ci_steps:
        required: true
        type: string

    secrets:
      SLACK_BOT_TOKEN:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

    variables:
      AWS_REGION:
        required: false
      BUCKET_NAME:
        required: false

      # Additional environment variables set in the workflow
      # Format: JSON object with string values (key becomes env variable name, value becomes env variable value)
      # Example: '{ "FOO": "BAR", "BAZ": "${{ secrets.BAZ }}" }'
      ADDITIONAL_VARIABLES:
        required: false
jobs:
  # Not sure if this is needed or will it be taken from previous workflow?
  setup:
    name: 'Environment setup'
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Detect env
        uses: infinum/js-pipeline/.github/actions/detect-env@add-angular-support
        with:
          runner: ${{ inputs.runner }}
          framework: ${{ inputs.framework }}
          ssr: ${{ inputs.ssr }}
          package_manager: ${{ inputs.package_manager }}
          newrelic: ${{ inputs.newrelic }}
          dist_path: ${{ inputs.dist_path }}
      - name: 'Bootstrap up the Node.js environment'
        uses: infinum/js-pipeline/.github/actions/bootstrap@add-angular-support
        with:
          runner: ${{ inputs.runner }}
          package_manager: ${{ env.package_manager }}
          node_version: ${{ inputs.node_version }}
          framework: ${{ env.framework }}
          env_vars: ${{ secrets.ADDITIONAL_VARIABLES }}
  deploy:
    needs: [setup]
    name: 'Deploy the application to S3'
    if: ${{ contains(inputs.ci_steps, 'deploy') }}
    runs-on: ${{ inputs.runner }}
    steps:
      - id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: public
          path: public

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy static site to S3 bucket
        id: deploy-release
        run: aws s3 sync public/ s3://${{ vars.BUCKET_NAME }} --delete

      - name: Notify on Slack
        env:
          SUCCESS: ${{ steps.deploy-release.outcome == 'success' }}
          FAILURE: ${{ steps.deploy-release.outcome != 'success' }}
          CHANNEL: ${{ inputs.slack_notification_channel }}
          NOTIFY_ON: ${{ inputs.notify_on }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEPLOY_ENVIRONMENT: ${{ inputs.environment }}
        if: ${{ always() && inputs.slack_notification_channel }}
        run: |
          if [ -z "$SLACK_BOT_TOKEN" ] ; then
            echo "SLACK_BOT_TOKEN secret is missing from the workflow!"
            exit 1
          fi
          if [[ "$NOTIFY_ON" != "success" && "$NOTIFY_ON" != "failure" && "$NOTIFY_ON" != "all" ]] ; then
            echo "notify_on input is not valid. Must be one of: 'success', 'failure', or 'all'"
            exit 1
          fi
          SHORT_SHA=$(git rev-parse --short HEAD)
          FULL_SHA=$(git rev-parse HEAD)
          COMMIT_MESSAGE=$(git show -s --format=%s)
          GITHUB_RUN_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          GITHUB_COMMIT_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$FULL_SHA"
          if [[ "$SUCCESS" = true && ("$NOTIFY_ON" = "success" || "$NOTIFY_ON" = "all") ]] ; then
            curl -X POST https://slack.com/api/chat.postMessage \
                 -H "Content-type: application/json; charset=utf-8" \
                 -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                 -s -S \
                 -d @- <<- EOF
                  {
                    "channel": "$CHANNEL",
                    "icon_url": "${{ inputs.project_icon }}",
                    "username": "GitHub Deploy Action",
                    "attachments": [
                      {
                        "color": "#19a974",
                        "blocks": [
                          {
                            "type": "section",
                            "text": {
                              "type": "mrkdwn",
                              "text": "$GITHUB_ACTOR <$GITHUB_RUN_URL|deployed> to *$DEPLOY_ENVIRONMENT*! :tada: \n _ $COMMIT_MESSAGE _ (<$GITHUB_COMMIT_URL|$SHORT_SHA>)"
                            }
                          }
                        ]
                      }
                    ]
                  }
          EOF
          fi
          if [[ "$FAILURE" = true && ("$NOTIFY_ON" = "failure" || "$NOTIFY_ON" = "all") ]] ; then
            curl -X POST https://slack.com/api/chat.postMessage \
                 -H "Content-type: application/json; charset=utf-8" \
                 -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                 -s -S \
                 -d @- <<- EOF
                  {
                    "channel": "$CHANNEL",
                    "icon_url": ${{ inputs.project_icon }},
                    "username": "GitHub Deploy Action",
                    "attachments": [
                      {
                        "color": "#f75819",
                        "blocks": [
                          {
                            "type": "section",
                            "text": {
                              "type": "mrkdwn",
                              "text": "$GITHUB_ACTOR failed to <$GITHUB_RUN_URL|deploy> to *$DEPLOY_ENVIRONMENT*! :boom: \n _ $COMMIT_MESSAGE _ (<$GITHUB_COMMIT_URL|$SHORT_SHA>)"
                            }
                          }
                        ]
                      }
                    ]
                  }
          EOF
          fi